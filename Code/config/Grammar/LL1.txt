==== start
Program
==== terminal
record IDENTIFIER int float char string double if then else NUM CHAR STRING NUM SCI-NUM FLOAT SUB ( ) * { } [ ] EQL ADD ++ -- > < >= <= NE ASSIGN proc && || true , false do while call for ; return NOT /
==== non terminal
Program C D P S E B A E F G H I Elist Elist' X M V relop L B' M' E' G' T L' X Y Z O Q Q' O' X' Y' Z' K J
==== production
Program -> P
P -> D P
P -> S P
P -> ε
T -> X C
D -> T IDENTIFIER A C ; | proc X IDENTIFIER ( M ) { P } | record IDENTIFIER { P }
A -> ASSIGN F A | ε | , IDENTIFIER A | ASSIGN E A
C -> [ NUM ] C | ε
X -> int | float | char | string | double
S -> if B then S else S | return E ; | L ASSIGN E ; | do S while B | for ( IDENTIFIER ASSIGN E ; B ; IDENTIFIER V ) S | call IDENTIFIER ( Elist ) ; | while B S | { S }
L -> IDENTIFIER L'
L' -> [ NUM ] L' | ε
B -> O B'
B' -> || O B' | ε
O -> Q O'
O' -> ε | && Q O'
Q -> NOT Q | [ B ] | E relop E
relop -> < | NE | <= | > | >= | EQL
V -> ++ | --
Elist -> E Elist'
Elist' -> , E Elist' | ε
M -> X IDENTIFIER M' | ε
M' -> , X IDENTIFIER M' | ε
E -> Y E'
E' -> J Y E' | ε
J -> ADD | SUB
Y -> Z Y'
Y' -> K Z Y' | ε
K -> * | /
Z -> J Z | ( E )
Z -> IDENTIFIER | NUM | FLOAT | SCI-NUM
F -> IDENTIFIER | CHAR | STRING | NUM | SCI-NUM | FLOAT
