offset int 相对地址
nextquad 全局
q int队列 全局
.type string IDENTIFIER类型
.width int 类型宽度
.truelist/falselist/nextlist list<int> 指令标号列表
.quad int 指令标号
.lexeme string 变量名字
.addr string ???

p全局临时变量

a1:T.type=C.type;T.width=C.width;
a2:enter(IDENTIFIER.lexeme,T.type,offset);offset=offset+T.width;
a3:type='proc';enter(id.lexeme,type,offset);
a4:type='record';enter(id.lexeme,type,offset);
a6:C.type=array( NUM.val,C1.type); C.width=NUM.val*C1.width;
a7:C.type=t; C.width=w;
a8:X.type=int ;X.width=4;
a9:X.type=float ;X.width=4;
a10:X.type=char ;X.width=1;
a11:X.type=double ;X.width=8;
a12:backpatch(B.truelist, U1.quad); backpatch(B.falselist, U2.quad); S.nextlist=merge(merge(S1.nextlist,W.nextlist),S2.nextlist);
a13:gen( L.array ‘[’ L.offset ‘]’ ‘=’ E.addr );
a14:p=lookup(id.lexeme); if p==nil then error ;gen(id.lexeme '=' E.addr );
a15:n=0;for q中的每个t do {gen('param' t);n=n+1;}gen('call' IDENTIFIER.addr ',' n)
a16:S.nextlist = B.falselist;backpatch( S1.nextlist, U1.quad );backpatch( B.truelist, U2.quad );gen('goto' M1.quad);
a17:N.nextlist = makelist(nextquad); gen('goto_');
a18:L.array = lookup(IDENTIFIER.lexeme); if L.array==nil then error ; L.type = L.array.type.elem ;L.offset = newtemp();gen( L.offset ‘=’ E.addr ‘*’ L.type.width );
a19:B.truelist= merge(O1.truelist,O2.truelist );B.falselist = O2.falselist ;backpatch(O1.falselist, U.quad );
a20:U.quad = nextquad ;
a21:O.truelist= Q2.truelist;O.falselist = merge(Q1.falselist,Q2.falselist) ;backpatch(Q1.truelist, U.quad );
a22:Q.truelist = B.falselist; Q.falselist = B.truelist;
a23:Q.truelist = B.truelist ; Q.falselist = B.falselist ;
a24:Q.truelist = makelist(nextquad);Q.falselist = makelist(nextquad+1);gen('if ' E1.addr relop E2.addr 'goto _');gen('goto _');
a25:Q.truelist = makelist(nextquad);gen('goto _');
a26:Q.falselist = makelist(nextquad);gen('goto _');
a27:将E.addr添加到q的队尾
a28:E.addr=newtemp();检查Y和E’的type;E.type = Y.type;gen(E.addr '=' Y.addr '+' E'.addr);
a30:E'.addr=newtemp()检查Y和E’的type;gen(E'.addr '=' Y.addr '+' E'(right).addr)
a31:Y.addr=newtemp();检查Y和E’的type;gen(Y.addr '=' Z.addr '*' Y'.addr);
a32:Y'.addr=newtemp();检查Y和E’的type;gen(Y'.addr '=' Z.addr '*' Y'(right).addr)
a33:Z.addr=E.addr Z.type=E.type
a34:Z.addr=lookup(IDENTIFIER.lexeme)(这里的意思是lookup查找是否存在，然后再把词法值直接给addr);if Z.addr==nil then error;Z.type = IDENTIFIER.type(lookup里拿到的)
a35:Z.addr=NUM.lex Z.type="int"
a36:Z.addr=FLOAT.lex Z.type="float"
a37:gen('return' E.addr)
a38:E.addr=newtemp();检查E'和Y的type;gen(E.addr '=' E'.addr '-' Y.addr);
a39:Y'.addr=newtemp();检查Z和Y’的type;gen(Y'.addr '=' Z.addr '/' Y'(right).addr)
a40:t=X.type;w=X.width;
a41:E'.addr=0; 赋值TYPE
a42:Y'.addr=1; 赋值TYPE
a43:
a44:p=newtemp();gen(t '=' E.addr '*' a.width); gen(offset '=' offset '+' t );a=a.array; 在这里检查E是否为合法整数下标
a45:P = lookup(IDENTIFIER.lexme) L.type=p.type L.width=p.with check repeat define 记录一个全局变量arraywidth，存储数组各维宽度 arrayElewidth 记录数组类型的宽度
a46:L'.addr=newtemp();L'.width = arrayEleWidth;gen(L'.addr = L'.width);L'.type = int 在此处检查对非数组型变量使用数组访问操作符
a47:gen(L.addr '=' E.addr)